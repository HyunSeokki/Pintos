#include "userprog/syscall.h"
#include <stdio.h>
#include <stdlib.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
/* prj1 Add */
#include "threads/vaddr.h"
#include "devices/shutdown.h"
#include "userprog/process.h"
#include "filesys/filesys.h"
#include "devices/input.h"
#include "filesys/file.h"
/* Add end */

static void syscall_handler (struct intr_frame *);

/****************************************************************/
/* @name: int where_vaddr													 */
/*	@param: void *vaddr - 메모리 주소 값								 */
/* @return: 1 or 0															 */
/*																					 */
/* 현재 참조하는 주소가 유저영역인지 커널영역인지 확인함			 */
/* 1: 유저 0: 커널				 											 */
/*	is_user_vaddr(), is_kernel_vaddr()이라는 함수가 이미 있음 킥 */
/****************************************************************/
int where_vaddr( void* vaddr ){
	return vaddr < PHYS_BASE;
}

/****************************************************************/
/* @name: void syscall_halt												 */
/* @param: none																 */
/*	@return: none 																 */
/*																					 */
/*	빡종																			 */
/****************************************************************/
void syscall_halt(void){
	shutdown_power_off();
}

/****************************************************************/
/* @name: void syscall_exit												 */
/* @param: int exitstatus - 쓰레드 종료 상태 값						 */
/*	@return: none 																 */
/*																					 */
/* 어떤 쓰레드가 어떤 상태값으로 종료하는지 출력하고 쓰레드를	 */
/* 종료함																		 */
/****************************************************************/
void syscall_exit(int exitstatus){
	struct thread *cur = thread_current();
	cur->exit_status = exitstatus;
	printf("%s: exit(%d)\n", cur->name, exitstatus);

	thread_exit();
}

/****************************************************************/
/* @name: int syscall_exec													 */
/* @param: const char *cmd_line - 실행시킬 명령어					 */
/*	@return: int pid - process_execute함수에서 리턴된 쓰레드 id	 */
/*																					 */
/* 명령어를 실행시킬 쓰레드를 만들고 그 id값을 리턴함				 */
/****************************************************************/
int syscall_exec(const char *cmd_line){
	int pid = process_execute(cmd_line);

	return pid;
}

/****************************************************************/
/* @name: int syscall_wait													 */
/* @param: int pid - 쓰레드 id											 */
/*	@return: int - process_wait함수 실행 결과 값						 */
/****************************************************************/
int syscall_wait(int pid){
	return process_wait(pid);
}

/****************************************************************/
/* @name: int syscall_read													 */
/* @param: int fd - file descriptor										 */
/* @param: void *buffer - buffer										 	 */
/* @param: unsigned size - buffer size									 */
/*	@return: unsigned size													 */
/****************************************************************/
int syscall_read(int fd, void *buffer, unsigned size){
	unsigned i = 0;
	//fd = 0;
	if( fd == 0 ){
		for( i=0; i<size; i++)
			((char*)buffer)[i] = input_getc();
		return size;
	}

	return -1;
}

/****************************************************************/
/* @name: int syscall_wirte												 */
/* @param: int fd - file descriptor										 */
/* @param: void *buffer - buffer										 	 */
/* @param: unsigned size - buffer size									 */
/*	@return: unsigned size													 */
/****************************************************************/
int syscall_write(int fd, const void *buffer, unsigned size){
	if( fd == 1 ){
		//fd = 1;
		putbuf((char*)buffer, size);
		return size;
	}

	return -1;
}

/****************************************************************/
/* @name: int syscall_fibo													 */
/* @param: int n - n번째 피보나치 수를 찾는데 사용					 */
/*	@return: int result - n번째 피보나치 수							 */
/****************************************************************/
int syscall_fibo(int n){
	int a = 1, b = 1, result = 0;
	
	if( n == 1 || n == 2 )
		return 1;
	else{
		int i = 0;
		for( i=3; i<=n; i++ ){
			result = a + b;
			a = b;
			b = result;
		}
	}

	return result;
}

/****************************************************************/
/* @name: int syscall_4sum													 */
/* @param: int a - 1번째 정수												 */
/* @param: int b - 2번째 정수												 */
/* @param: int c - 3번째 정수												 */
/* @param: int d - 4번째 정수												 */
/*	@return: int - a+b+c+d													 */
/****************************************************************/
int syscall_4sum(int a, int b, int c, int d){
	return a+b+c+d;
}

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
	int *esp = (int*)(f->esp);
	int syscall_enum = esp[0];
	void *vaddr = f->esp+4;

	//if( !where_vaddr( vaddr ) )
		//syscall_exit(-1);

	if( syscall_enum == SYS_HALT ){
		syscall_halt();
	}
	else if( syscall_enum == SYS_EXIT ){
		if( where_vaddr( vaddr ) ){
			f->eax = esp[1];
			syscall_exit( esp[1] );
		}
		else
			syscall_exit(-1);
		
	}	
	else if( syscall_enum == SYS_EXEC ){
		//if( !where_vaddr( vaddr ) ){
		if( is_user_vaddr( vaddr ) ){
			f->eax = syscall_exec( (char*)esp[1]);
		}
		else{

			syscall_exit(-1);
		}
		
	}
	else if( syscall_enum == SYS_WAIT ){
		if( where_vaddr( vaddr ) ){
			f->eax = syscall_wait( esp[1] );
		}
		else
			syscall_exit(-1);
	}
	else if( syscall_enum == SYS_READ ){
		f->eax = syscall_read( esp[1], (void*)esp[2], (unsigned)esp[3] );
	}
	else if( syscall_enum == SYS_WRITE ){
		f->eax = syscall_write( esp[1], (void*)esp[2], (unsigned)esp[3] );
	}
	else if( syscall_enum == SYS_FIBO ){
		f->eax = syscall_fibo( esp[1] );
	}
	else if( syscall_enum == SYS_4SUM ){
		f->eax = syscall_4sum( esp[1], esp[2], esp[3], esp[4] );
	}
	else if( syscall_enum == SYS_CREATE ){
	}
	else if( syscall_enum == SYS_REMOVE ){
//		f->eax = syscall_remove((const char*) esp[1]);
	}
	else if( syscall_enum == SYS_OPEN ){

		if( where_vaddr( vaddr ))
			f->eax = syscall_open ((const char*) esp[1]);
		else{
			;	
		}
	}
	else if( syscall_enum == SYS_CLOSE )
	{
	}
	else if( syscall_enum == SYS_FILESIZE ){
	//	f->eax = syscall_filesize( esp[1] );
	}
	else if( syscall_enum == SYS_SEEK ){
	}
	else if( syscall_enum == SYS_TELL ){
	}


}

int syscall_open(const char *filename)
{
	struct file *fp;
	struct filedesc *fdesc;
	struct thread *t_cur = thread_current();
	
	fp = filesys_open(filename);

	if(fp != NULL)
	{
		fdesc = malloc(sizeof(struct file_desc));

		fdesc->fd = t_cur->fd;
		t_cur->fd ++;
		fdesc->file = fp;
		list_push_front(&t_cur->file_list, &fdesc->elem);

		return t_cur->fd --;
	}
	else return -1;	
}
